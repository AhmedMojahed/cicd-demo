---
Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String
    Default: "Test"
  PipelineName:
    Description: Name of the pipeline
    Type: String
    Default: test

  BranchName:
    Description: GitHub branch name
    Type: String
    Default: main

  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: cicd-demo

  # ApplicationName:
  #   Description: CodeDeploy application name
  #   Type: String
  #   Default: DemoApp

  # DeploymentGroupName:
  #   Description: Application Deployment Group Name
  #   Type: String
  #   Default: Dev

  GithubToken:
    Type: String
    NoEcho: true

  GithubOwner:
    Type: String
    Default: AhmedMojahed

  # ECSCluster:
  #   Type: String

  ECSServiceName:
    Type: String
    Default: nginx

  BuildSpecPath:
    Type: String
    Default: nginx/buildspec.yml

  ECRRepoName:
    # Repository:
    Type: String
    Default: mogahed-ecr-repo

  ArtifatBucketName:
    Type: String
    Default: mogahed-bucket

Resources:
  #PipeLine
  #Role
  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "devicefarm:ListProjects"
                  - "devicefarm:ListDevicePools"
                  - "devicefarm:GetRun"
                  - "devicefarm:GetUpload"
                  - "devicefarm:CreateUpload"
                  - "devicefarm:ScheduleRun"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                Resource: "*"

  #Github connection Webhook
  # AppPipelineWebhook:
  #   Type: "AWS::CodePipeline::Webhook"
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GithubToken
  #     Filters:
  #       - JsonPath: $.ref
  #         MatchEquals: "refs/heads/{Branch}"
  #     TargetPipeline: !Ref AppPipeline
  #     TargetAction: Source
  #     Name: AppPipelineWebhook
  #     TargetPipelineVersion: !GetAtt AppPipeline.Version
  #     RegisterWithThirdParty: true

  # CodePipeline
  AppPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Ref PipelineName
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifatBucket
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GithubToken
                # PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: ECS
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Sub "${EnvironmentName}-ECS-CLUSTER"
                ServiceName:
                  Fn::ImportValue: !Sub ${EnvironmentName}-${ECSServiceName}
                FileName: imagedefinitions.json
              RunOrder: 1

  # s3 Artifacts
  # CodePipelineArtifactStoreBucket:
  #   Type: AWS::S3::Bucket
  #   DeletionPolicy: Delete
  #   UpdateReplacePolicy: Delete
  #   Properties:
  #     BucketName: !Ref ArtifatBucket
  #     VersioningConfiguration:
  #       Status: Enabled

  # CodePipelineArtifactStoreBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref CodePipelineArtifactStoreBucket
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: DenyUnEncryptedObjectUploads
  #           Effect: Deny
  #           Principal: "*"
  #           Action: s3:PutObject
  #           Resource:
  #             !Join ["", [!GetAtt CodePipelineArtifactStoreBucket.Arn, "/*"]]
  #           Condition:
  #             StringNotEquals:
  #               s3:x-amz-server-side-encryption: aws:kms
  #         - Sid: DenyInsecureConnections
  #           Effect: Deny
  #           Principal: "*"
  #           Action: s3:*
  #           Resource:
  #             !Join ["", [!GetAtt CodePipelineArtifactStoreBucket.Arn, "/*"]]
  #           Condition:
  #             Bool:
  #               aws:SecureTransport: false

  #Codebuild
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      # BadgeEnabled: true
      Name: !Sub ${EnvironmentName}-${ECSServiceName}-BuildProject
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref "BuildSpecPath"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        # Image: aws/codebuild/docker:19.03.15
        # Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: CONTAINER_NAME
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}-${ECSServiceName}-ContaienrName
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}
          - Name: ECR_SERVER
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/
          - Name: ECS_SERVICE_NAME
            Value:
              Fn::ImportValue: !Sub ${EnvironmentName}-${ECSServiceName}

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifatBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepoName}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
  # #ecs / ecr
  # Repository:
  #   Type: AWS::ECR::Repository
  #   DeletionPolicy: Delete
  #   # DeletionPolicy: Retain
  #   Properties:
  #     RepositoryName: !Ref ECRRepoName
